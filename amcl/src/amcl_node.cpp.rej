--- amcl/src/amcl_node.cpp
+++ amcl/src/amcl_node.cpp
@@ -80,192 +79,188 @@ typedef struct
 
   // Covariance of pose estimate
   pf_matrix_t pf_pose_cov;
-
 } amcl_hyp_t;
 
 static double
-normalize(double z)
-{
+normalize(double z) {
   return atan2(sin(z),cos(z));
 }
+
 static double
-angle_diff(double a, double b)
-{
+angle_diff(double a, double b) {
   double d1, d2;
   a = normalize(a);
   b = normalize(b);
   d1 = a-b;
   d2 = 2*M_PI - fabs(d1);
-  if(d1 > 0)
+  if (d1 > 0)
     d2 *= -1.0;
-  if(fabs(d1) < fabs(d2))
-    return(d1);
+  if (fabs(d1) < fabs(d2))
+    return (d1);
   else
-    return(d2);
+    return (d2);
 }
 
 static const std::string scan_topic_ = "scan";
 
-class AmclNode
-{
-  public:
-    AmclNode();
-    ~AmclNode();
+class AmclNode {
+ public:
+  AmclNode();
+  ~AmclNode();
 
-    /**
-     * @brief Uses TF and LaserScan messages from bag file to drive AMCL instead
-     */
-    void runFromBag(const std::string &in_bag_fn);
+  /**
+   * @brief Uses TF and LaserScan messages from bag file to drive AMCL instead
+   */
+  void runFromBag(const std::string &in_bag_fn);
 
-    int process();
-    void savePoseToServer();
+  int process();
+  void savePoseToServer();
 
-  private:
-    tf::TransformBroadcaster* tfb_;
+ private:
+  tf::TransformBroadcaster* tfb_;
 
-    // Use a child class to get access to tf2::Buffer class inside of tf_
-    struct TransformListenerWrapper : public tf::TransformListener
-    {
-      inline tf2_ros::Buffer &getBuffer() {return tf2_buffer_;}
-    };
+  // Use a child class to get access to tf2::Buffer class inside of tf_
+  struct TransformListenerWrapper : public tf::TransformListener {
+    inline tf2_ros::Buffer &getBuffer() {return tf2_buffer_;}
+  };
 
-    TransformListenerWrapper* tf_;
+  TransformListenerWrapper* tf_;
 
-    bool sent_first_transform_;
+  bool sent_first_transform_;
 
-    tf::Transform latest_tf_;
-    bool latest_tf_valid_;
+  tf::Transform latest_tf_;
+  bool latest_tf_valid_;
 
-    // Pose-generating function used to uniformly distribute particles over
-    // the map
-    static pf_vector_t uniformPoseGenerator(void* arg);
+  // Pose-generating function used to uniformly distribute particles over
+  // the map
+  static pf_vector_t uniformPoseGenerator(void* arg);
 #if NEW_UNIFORM_SAMPLING
-    static std::vector<std::pair<int,int> > free_space_indices;
+  static std::vector<std::pair<int,int> > free_space_indices;
 #endif
-    // Callbacks
-    bool globalLocalizationCallback(std_srvs::Empty::Request& req,
-                                    std_srvs::Empty::Response& res);
-    bool nomotionUpdateCallback(std_srvs::Empty::Request& req,
-                                    std_srvs::Empty::Response& res);
-    bool setMapCallback(nav_msgs::SetMap::Request& req,
-                        nav_msgs::SetMap::Response& res);
-
-    void laserReceived(const sensor_msgs::LaserScanConstPtr& laser_scan);
-    void initialPoseReceived(const geometry_msgs::PoseWithCovarianceStampedConstPtr& msg);
-    void handleInitialPoseMessage(const geometry_msgs::PoseWithCovarianceStamped& msg);
-    void mapReceived(const nav_msgs::OccupancyGridConstPtr& msg);
-
-    void handleMapMessage(const nav_msgs::OccupancyGrid& msg);
-    void freeMapDependentMemory();
-    map_t* convertMap( const nav_msgs::OccupancyGrid& map_msg );
-    void updatePoseFromServer();
-    void applyInitialPose();
-
-    double getYaw(tf::Pose& t);
-
-    //parameter for what odom to use
-    std::string odom_frame_id_;
-
-    //paramater to store latest odom pose
-    tf::Stamped<tf::Pose> latest_odom_pose_;
-
-    //parameter for what base to use
-    std::string base_frame_id_;
-    std::string global_frame_id_;
-
-    bool use_map_topic_;
-    bool first_map_only_;
-
-    ros::Duration gui_publish_period;
-    ros::Time save_pose_last_time;
-    ros::Duration save_pose_period;
-
-    geometry_msgs::PoseWithCovarianceStamped last_published_pose;
-
-    map_t* map_;
-    char* mapdata;
-    int sx, sy;
-    double resolution;
-
-    message_filters::Subscriber<sensor_msgs::LaserScan>* laser_scan_sub_;
-    tf::MessageFilter<sensor_msgs::LaserScan>* laser_scan_filter_;
-    ros::Subscriber initial_pose_sub_;
-    std::vector< AMCLLaser* > lasers_;
-    std::vector< bool > lasers_update_;
-    std::map< std::string, int > frame_to_laser_;
-
-    // Particle filter
-    pf_t *pf_;
-    double pf_err_, pf_z_;
-    bool pf_init_;
-    pf_vector_t pf_odom_pose_;
-    double d_thresh_, a_thresh_;
-    int resample_interval_;
-    int resample_count_;
-    double laser_min_range_;
-    double laser_max_range_;
-
-    //Nomotion update control
-    bool m_force_update;  // used to temporarily let amcl update samples even when no motion occurs...
-
-    AMCLOdom* odom_;
-    AMCLLaser* laser_;
-
-    ros::Duration cloud_pub_interval;
-    ros::Time last_cloud_pub_time;
-
-    // For slowing play-back when reading directly from a bag file
-    ros::WallDuration bag_scan_period_;
-
-    void requestMap();
-
-    // Helper to get odometric pose from transform system
-    bool getOdomPose(tf::Stamped<tf::Pose>& pose,
-                     double& x, double& y, double& yaw,
-                     const ros::Time& t, const std::string& f);
-
-    //time for tolerance on the published transform,
-    //basically defines how long a map->odom transform is good for
-    ros::Duration transform_tolerance_;
-
-    ros::NodeHandle nh_;
-    ros::NodeHandle private_nh_;
-    ros::Publisher pose_pub_;
-    ros::Publisher particlecloud_pub_;
-    ros::ServiceServer global_loc_srv_;
-    ros::ServiceServer nomotion_update_srv_; //to let amcl update samples without requiring motion
-    ros::ServiceServer set_map_srv_;
-    ros::Subscriber initial_pose_sub_old_;
-    ros::Subscriber map_sub_;
-
-    amcl_hyp_t* initial_pose_hyp_;
-    bool first_map_received_;
-    bool first_reconfigure_call_;
-
-    boost::recursive_mutex configuration_mutex_;
-    dynamic_reconfigure::Server<amcl::AMCLConfig> *dsrv_;
-    amcl::AMCLConfig default_config_;
-    ros::Timer check_laser_timer_;
-
-    int max_beams_, min_particles_, max_particles_;
-    double alpha1_, alpha2_, alpha3_, alpha4_, alpha5_;
-    double alpha_slow_, alpha_fast_;
-    double z_hit_, z_short_, z_max_, z_rand_, sigma_hit_, lambda_short_;
+  // Callbacks
+  bool globalLocalizationCallback(std_srvs::Empty::Request& req,
+                                  std_srvs::Empty::Response& res);
+  bool nomotionUpdateCallback(std_srvs::Empty::Request& req,
+                                  std_srvs::Empty::Response& res);
+  bool setMapCallback(nav_msgs::SetMap::Request& req,
+                      nav_msgs::SetMap::Response& res);
+
+  void laserReceived(const sensor_msgs::LaserScanConstPtr& laser_scan);
+  void initialPoseReceived(const geometry_msgs::PoseWithCovarianceStampedConstPtr& msg);
+  void handleInitialPoseMessage(const geometry_msgs::PoseWithCovarianceStamped& msg);
+  void mapReceived(const nav_msgs::OccupancyGridConstPtr& msg);
+
+  void handleMapMessage(const nav_msgs::OccupancyGrid& msg);
+  void freeMapDependentMemory();
+  map_t* convertMap( const nav_msgs::OccupancyGrid& map_msg );
+  void updatePoseFromServer();
+  void applyInitialPose();
+
+  double getYaw(tf::Pose& t);
+
+  //parameter for what odom to use
+  std::string odom_frame_id_;
+
+  //paramater to store latest odom pose
+  tf::Stamped<tf::Pose> latest_odom_pose_;
+
+  //parameter for what base to use
+  std::string base_frame_id_;
+  std::string global_frame_id_;
+
+  bool use_map_topic_;
+  bool first_map_only_;
+
+  ros::Duration gui_publish_period;
+  ros::Time save_pose_last_time;
+  ros::Duration save_pose_period;
+
+  geometry_msgs::PoseWithCovarianceStamped last_published_pose;
+
+  map_t* map_;
+  char* mapdata;
+  int sx, sy;
+  double resolution;
+
+  message_filters::Subscriber<sensor_msgs::LaserScan>* laser_scan_sub_;
+  tf::MessageFilter<sensor_msgs::LaserScan>* laser_scan_filter_;
+  ros::Subscriber initial_pose_sub_;
+  std::vector< AMCLLaser* > lasers_;
+  std::vector< bool > lasers_update_;
+  std::map< std::string, int > frame_to_laser_;
+
+  // Particle filter
+  pf_t *pf_;
+  double pf_err_, pf_z_;
+  bool pf_init_;
+  pf_vector_t pf_odom_pose_;
+  double d_thresh_, a_thresh_;
+  int resample_interval_;
+  int resample_count_;
+  double laser_min_range_;
+  double laser_max_range_;
+
+  //Nomotion update control
+  bool m_force_update;  // used to temporarily let amcl update samples even when no motion occurs...
+
+  AMCLOdom* odom_;
+  AMCLLaser* laser_;
+
+  ros::Duration cloud_pub_interval;
+  ros::Time last_cloud_pub_time;
+
+  // For slowing play-back when reading directly from a bag file
+  ros::WallDuration bag_scan_period_;
+
+  void requestMap();
+
+  // Helper to get odometric pose from transform system
+  bool getOdomPose(tf::Stamped<tf::Pose>& pose,
+                   double& x, double& y, double& yaw,
+                   const ros::Time& t, const std::string& f);
+
+  //time for tolerance on the published transform,
+  //basically defines how long a map->odom transform is good for
+  ros::Duration transform_tolerance_;
+
+  ros::NodeHandle nh_;
+  ros::NodeHandle private_nh_;
+  ros::Publisher pose_pub_;
+  ros::Publisher particlecloud_pub_;
+  ros::ServiceServer global_loc_srv_;
+  ros::ServiceServer nomotion_update_srv_; //to let amcl update samples without requiring motion
+  ros::ServiceServer set_map_srv_;
+  ros::Subscriber initial_pose_sub_old_;
+  ros::Subscriber map_sub_;
+
+  amcl_hyp_t* initial_pose_hyp_;
+  bool first_map_received_;
+  bool first_reconfigure_call_;
+
+  boost::recursive_mutex configuration_mutex_;
+  dynamic_reconfigure::Server<amcl::AMCLConfig> *dsrv_;
+  amcl::AMCLConfig default_config_;
+  ros::Timer check_laser_timer_;
+
+  int max_beams_, min_particles_, max_particles_;
+  double alpha1_, alpha2_, alpha3_, alpha4_, alpha5_;
+  double alpha_slow_, alpha_fast_;
+  double z_hit_, z_short_, z_max_, z_rand_, sigma_hit_, lambda_short_;
   //beam skip related params
-    bool do_beamskip_;
-    double beam_skip_distance_, beam_skip_threshold_, beam_skip_error_threshold_;
-    double laser_likelihood_max_dist_;
-    odom_model_t odom_model_type_;
-    double init_pose_[3];
-    double init_cov_[3];
-    laser_model_t laser_model_type_;
-    bool tf_broadcast_;
-
-    void reconfigureCB(amcl::AMCLConfig &config, uint32_t level);
-
-    ros::Time last_laser_received_ts_;
-    ros::Duration laser_check_interval_;
-    void checkLaserReceived(const ros::TimerEvent& event);
+  bool do_beamskip_;
+  double beam_skip_distance_, beam_skip_threshold_, beam_skip_error_threshold_;
+  double laser_likelihood_max_dist_;
+  odom_model_t odom_model_type_;
+  double init_pose_[3];
+  double init_cov_[3];
+  laser_model_t laser_model_type_;
+  bool tf_broadcast_;
+
+  void reconfigureCB(amcl::AMCLConfig &config, uint32_t level);
+
+  ros::Time last_laser_received_ts_;
+  ros::Duration laser_check_interval_;
+  void checkLaserReceived(const ros::TimerEvent& event);
 };
 
 std::vector<std::pair<int,int> > AmclNode::free_space_indices;
@@ -627,23 +606,19 @@ void AmclNode::runFromBag(const std::string &in_bag_fn)
     ros::getGlobalCallbackQueue()->callAvailable(ros::WallDuration());
 
     tf2_msgs::TFMessage::ConstPtr tf_msg = msg.instantiate<tf2_msgs::TFMessage>();
-    if (tf_msg != NULL)
-    {
+    if (tf_msg != NULL) {
       tf_pub.publish(msg);
-      for (size_t ii=0; ii<tf_msg->transforms.size(); ++ii)
-      {
+      for (size_t ii = 0; ii < tf_msg->transforms.size(); ++ii) {
         tf_->getBuffer().setTransform(tf_msg->transforms[ii], "rosbag_authority");
       }
       continue;
     }
 
     sensor_msgs::LaserScan::ConstPtr base_scan = msg.instantiate<sensor_msgs::LaserScan>();
-    if (base_scan != NULL)
-    {
+    if (base_scan != NULL) {
       laser_pub.publish(msg);
       laser_scan_filter_->add(base_scan);
-      if (bag_scan_period_ > ros::WallDuration(0))
-      {
+      if (bag_scan_period_ > ros::WallDuration(0)) {
         bag_scan_period_.sleep();
       }
       continue;
